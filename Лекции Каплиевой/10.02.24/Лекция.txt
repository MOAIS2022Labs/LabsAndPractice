Для "хорошо" (минимум) за предмет необходимо сделать доклад про сортировки.
Нужно рассказать про конкретную сортировку к 17 числу (5-7 минут).
Рассказать суть сортировки, приготовить пример для неё,
произнести алгоритм (последовательность действий), при этом алгоритм не связан с ЯП.
Потом показать пример на С++. Сделать резюме: когда используется данная сортировка.
Назвать сложность данной сортировки.

На экзамене будет в билете некая внутренняя сортировка. 
Если доклад доложен, то билет засчитывется.
На "отлично" нужно сделать одну дополнительную лабу Каплиевой (обеим группам).
Лаба будет по внешней сортировке.

Списки желающих людей должны подать старосты.



---------------------------------------------------------------------

Умный указатель - класс, который управляет динамически выделенной памятью
(ресурсом). Умный указатель обеспечивает управление и корректное удаление динамически
выделенного ресурса в соответсвтующее время (обычно, когда умный указатель 
выходит из олбасти видимости). Его задача - только корректно освободить, а не выделить память.
Умный укзаатель нелья выделять динамически (это статическая переменная),
т.к. существует риск того, что умный указатель будет неправильно удалён,
а след-но, принадлежащий ему ресурс также будет удалён, и произойдёт утечка памяти.
Создавая умные указатели статически, получаем гарантию того, что умный указатель корректно
выйдет из области видимости и удалит хранимый объект.

Умный указатель не всегда может управлять объектом:
1) либо потому что объект был создан пустым (с использованием конструктора по умолчанию);
2) либо в объект передан в качестве параметра nullptr;
3) либо потому что ресурс был перемещён в другой unique pointer;
поэтому, прежде чем использовать
какой-либо из операторов разыменования, необходимо проверить, что ум. указатель управляет ресурсом.

Функция make_unique - это шаблон функции, которая создаёт объект типа <шаблон> и инициализирует его аргументами,
переданными в функцию.

Умный указатель и динамические массивы
Умный указатель знает, когда нужно использовать, когда нужно использовать единичный delete,
а когда структурный delete[] для массива, т.е. unique ptr можно использовать как для статических переменных,
как и для динамических массивов.

Использование функции make_unique является необязательным, но рекомендуемым, т.к. решает проблему безопасности
использования исключений, которая может возникнуть в результате неопределённого порядка обработки аргументов функции.
Пример:
// void function (std::unique_ptr<T> (new T), function_with_exception()); 
/*
Компилятор может сначала выделить новый объект Т, далее вызывается функци обработки исключения,
и только потом компилятор создаёт умный указатель на объект Т. 
*/
Если на швге 2 функция обработки в момент вызова исключения выбросит исключение, 
то выделенный объект Т не будет корректно удалён, т.к. умный указатель не успеет к этому моменту создасться,
что приведёт к утечке памяти!
Функция make_unique объединяет создание объекта Т и умного указателя внутри себя, где порядок обработки 
чётко определён.


Умный указатель может быть возвращён из функции. Возвращение всегда по значению, 
т.к. нельзя создавать указатель на умный указатель! Иначе произойдёт 
разрыв цепочки владельцев на выделенную ячейку памяти.

Ситуация, когда функция должна владеть ресурсом, возникает крайне редко, 
хотя можно передать умный указатель по ссылке (тогда функция использует объект 
без передачи ей права собственности на этот объект), вместо этого лучше передавать сам объект (ресурс)
по указателю или ссылке, что позволит функции остаться в стороне от управления объектом.









Задание на практику:
Описать умный указатель, который является обёрткой на динамический массив, где каждая
ячейка является умным указателем на ячейку с целочисленным значением.
Должны быть:
1. Функция создания такого массива. 
2. Функция печати.
3. Функция, считающая количество нечётных элементов.
