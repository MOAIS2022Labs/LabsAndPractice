#pragma once
#include <iostream>

const int n = 2; // порядок дерева
struct TInfo
{
    int key; // ключ элемента
    char other;
};

struct Pair // структура, которая хранит пару
{
    TInfo info;
    Page *ptr;
};

struct Page
{
    int m; // фактическое количетсво узлов
    Page *p0;
    Pair elem[2 * n];
};

using BTree = Page *;

void Search_and_Add(TInfo x, BTree t, bool &h, TInfo &u)
{
    // h - высота дерева,
    // которая при определённых условиях будет меняться, т.е.
    // нужно ли производить разделение корневой страницы.
    // u - элемент, который фактически будет добавляться на страницу.
    if (!t) // если дерева нет,
    {
        u = x;    // то нужно сделать включение.
        h = true; // Означает, что элемент при включении будет передаваться первым.
    }
    else
    {
        // Двочиный поиск x в массиве elem:
        /*
            ... - реализовать поиск.
        */
        if (/*найдено*/) // если элемент найден
        {
        }
        else // будем искать дальше
        {
            Search_and_Add(x, /*потомок*/, h, u);
            if (h) // если после Search нужно элемент включать в страницу
            {
                if (m < 2 * n) // если фактическое число элементов на этой странице меньше 2n,
                // то делается включение на страницу
                {
                    // ... - включение на страницу
                    h = false;
                }
                else // иначе страница заполнена
                {
                    // ... - разделить страницу и передать вверх средний элемент
                    // здесь "h" остаётся true, но "u" принимает значение среднего элемента
                }
            }
        }
    }
}

// Сделать методы печати (print) и удаления (clear)
// clear вызывать для каждого потомка Pi (i = 0...m)


// Удалить в данной последовательности элементы и написать, изменилась ли структура дерева при удалении или нет
// Если да, то изобразить это.
// ДАННОЕ ЗАДАНИЕ БУДЕТ ВХОДИТЬ В ЭКЗАМЕН!!!
// Сама последовательность:
// 25 45 24 38 32 8 27 46 13 42 5 22 18 26 7 35 15 