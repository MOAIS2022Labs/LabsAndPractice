/*
Канатников Максим 9 группа
8. Создать класс Time для работы со временем в формате «час:минута:секунда». Класс
должен включать в себя не менее четырех способов инициализации: числами,
строкой (например, «23:59:59»), секундами, временем. Обязательными операциями
являются: вычисление разности между двумя моментами времени в секундах,
сложение времени и заданного количества секунд, вычитание из времени заданного
количества секунд, сравнение моментов времени, перевод в секунды, перевод
в минуты (с округлением до целой минуты).
*/

#include "UserInteraction.h"
#include "Time.h"
#include <Windows.h>




void file_input(Time& time);

// действия над моментом времени
void action(Time& time);

void console_output(Time& time);

void file_output(Time& time, std::ofstream& file);

// выбор способа инициализации и инициализация
int inizialization(Time& time);

void read_file(std::ifstream& file, Time& time);

void read_console(Time& time);


int main()
{
	SetConsoleOutputCP(1251);
	int choice = 0;	
	do
	{
		Time time;
		choice = inizialization(time);
		if (choice)
			action(time);
	} while (choice != 0);
	return 0;
}

void file_input(Time& time)
{
	std::cout << "Введите имя файла: ";
	std::string fname;
	std::cin >> fname;
	while (!check_file(fname))
	{
		std::cout << "Данные не были считаны, введите другое имя файла: ";
		std::cin >> fname;
	}
	std::ifstream file(fname);
	read_file(file, time);
	file.close();
}

int inizialization(Time& time)
{
	int choice = inizialization_menu();
	switch (choice)
	{
	case 1: // числами
	{
		uShort hour, minute, second;
		read_and_check(hour, "Введите часы: ", 0, 23);
		read_and_check(minute, "Введите минуты: ", 0, 59);
		read_and_check(second, "Введите секунды: ", 0, 59);
		time = Time(hour, minute, second);
		break;
	}
	case 2: // строкой
	{
		std::string str;
		read_and_check(str, "Введите время в строковом формате: ");
		time = Time(str);
		break;
	}
	case 3: // секундами
	{
		uShort sec;
		read_and_check(sec, "Введите секунды: ", 0, 85399);
		time = Time(sec);
		break;
	}
	case 4: // временем
	{
		uShort hour, minute, second;
		read_and_check(hour, "Введите часы: ", 0, 23);
		read_and_check(minute, "Введите минуты: ", 0, 59);
		read_and_check(second, "Введите секунды: ", 0, 59);
		tm t{ second, minute, hour };
		time = Time(t);
		break;
	}
	case 5: // из консоли
		read_console(time);
		break;
	case 6: // из файла
		file_input(time);
		console_output(time);
		break;
	}
	return choice;
}

void read_file(std::ifstream& file, Time& time)
{
	std::string str;
	file >> str;
	while (!condition_string(str))
	{
		std::cout << "Введите имя файла: ";
		std::string fname;
		std::cin >> fname;
		while (!check_file(fname))
		{
			std::cout << "Данные не были считаны, введите другое имя файла: ";
			std::cin >> fname;
		}
		std::ifstream file(fname);
		file >> str;
		file.close();
	}
	time.from_string(str);
}

void read_console(Time& time)
{
	uShort hour, minute, second;
	read_and_check(hour, "Введите часы: ", 0, 23);
	read_and_check(minute, "Введите минуты: ", 0, 59);
	read_and_check(second, "Введите секунды: ", 0, 59);
	time = Time(hour, minute, second);
}

void action(Time& time)
{
	int choice = 0;
	do
	{
		choice = action_menu();
		switch (choice)
		{
		case 1: // вычесть секунды
		{
			uShort sec;
			read_and_check(sec, "Введите количество секунд: ", 0, 85399);
			time.subtract_seconds(sec);
			break;
		}
		case 2: // добавить секунды
		{
			uShort sec;
			read_and_check(sec, "Введите количество секунд: ", 0, 85399);
			time.add_seconds(sec);
			break;
		}
		case 3:
			switch (output_menu())
			{
			case 1:
				std::cout << time.to_seconds() << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << time.to_seconds();
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		case 4:
			switch (output_menu())
			{
			case 1:
				std::cout << time.to_minutes() << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << time.to_seconds();
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		case 5:
			console_output(time);
			break;
		case 6:
		{
			std::string fname = choose_out_file_name();
			std::ofstream file(fname.c_str());
			std::cout << "Информация напечатана в файл " << fname << '\n';
			file.close();
			break;
		}
		case 7:
			switch (output_menu())
			{
			case 1:
				std::cout << time.to_string() << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << time.to_seconds();
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		case 8:
		{
			Time new_time;
			inizialization(new_time);
			Time res = time + new_time;
			std::cout << '\n';
			switch (output_menu())
			{
			case 1:
				console_output(res);
				std::cout << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file_output(res, file);
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		}
		case 9:
		{
			Time new_time;
			inizialization(new_time);
			Time res = time - new_time;
			std::cout << '\n';
			switch (output_menu())
			{
			case 1:
				console_output(res);
				std::cout << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file_output(res, file);
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		}
		case 10:
		{
			Time new_time;
			inizialization(new_time);
			switch (output_menu())
			{
			case 1:
				std::cout << ((time == new_time) ? "true" : "false") << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << ((time == new_time) ? "true" : "false");
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
			
		}
		case 11:
		{
			Time new_time;
			inizialization(new_time);
			switch (output_menu())
			{
			case 1:
				std::cout << ((time != new_time) ? "true" : "false") << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << ((time != new_time) ? "true" : "false");
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		}
		case 12:
		{
			Time new_time;
			inizialization(new_time);
			switch (output_menu())
			{
			case 1:
				std::cout << ((time > new_time) ? "true" : "false") << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << ((time > new_time) ? "true" : "false");
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		}
		case 13:
		{
			Time new_time;
			inizialization(new_time);
			switch (output_menu())
			{
			case 1:
				std::cout << ((time < new_time) ? "true" : "false") << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << ((time < new_time) ? "true" : "false");
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		}
		case 14:
		{
			Time new_time;
			inizialization(new_time);
			switch (output_menu())
			{
			case 1:
				std::cout << ((time >= new_time) ? "true" : "false") << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << ((time >= new_time) ? "true" : "false");
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		}
		case 15:
		{
			Time new_time;
			inizialization(new_time);
			switch (output_menu())
			{
			case 1:
				std::cout << ((time <= new_time) ? "true" : "false") << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << ((time <= new_time) ? "true" : "false");
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		}
		case 16:
		{
			Time new_time;
			inizialization(new_time);
			switch (output_menu())
			{
			case 1:
				std::cout << time.difference(new_time) << '\n';
				break;
			case 2:
				std::string fname = choose_out_file_name();
				std::ofstream file(fname);
				file << time.difference(new_time);
				std::cout << "Информация напечатана в файл " << fname << '\n';
				file.close();
				break;
			}
			break;
		}
		}
	} while (choice != 0);
}

void console_output(Time& time)
{
	std::cout << time.to_string() << '\n';
}

void file_output(Time& time, std::ofstream& file)
{
	file << time.to_string();
}
