#include <iostream>

struct deq
{
	int* a, size, len, first, last;
	deq() :size(8), len(0) {
		last = size / 2;
		first = last - 1;
		a = new int[size];
	}
	~deq()
	{
		delete[] a;
	}
	void shift_to_right() {
		for (int i = last; i > 0; --i)
		{
			a[i] = a[i - 1];
		}
		++last;
	}
	void shift_to_left() {
		for (int i = first; i < size; ++i)
		{
			a[i] = a[i + 1];
		}
		--first;
	}
	void give_more() {
		size *= 2;
		int* help = new int[size], i = first + len/2, j = last - len/2;
		last = size / 2;
		first = last - 1;
		for (i, j; j-i < len; --i, ++j)
		{
			help[first--] = a[i];
			help[last++] = a[j];
		}
		delete[] a;
		a = help;
	}
	void take_back() {
		size /= 2;
		int* help = new int[size], i = first + len / 2, j = last - len / 2;
		last = size / 2;
		first = last - 1;
		for (i, j; j - i < len; --i, ++j)
		{
			help[first--] = a[i];
			help[last++] = a[j];
		}
		delete[] a;
		a = help;
	}
	void add_start(int el) {
		if(first>=0)
		{
			a[first--] = el;
		}
		else
		{
			this->shift_to_right();
			a[0] = el;
		}
		++len;
		if (2*(len-2)==size)
		{
			this->give_more();
		}
	}
	void add_end(int el) {
		if(last<size)
		{
			a[last++] = el;
		}
		else
		{
			this->shift_to_left();
			a[size - 1] = el;
		}
		++len;
		if (2 * (len-2) == size)
		{
			this->give_more();
		}
	}
	void del_start() {
		if(first<last)
		{
			++first;
			--len;
		}
		if (size>8 && 4*(len+2)==size)
		{
			this->take_back();
		}
	}
	void del_end() {
		if(first<last)
		{
			--last;
			--len;
		}
		if (size>8 && 4 * (len + 2) == size)
		{
			this->take_back();
		}
	}
	void print() {
		for (int i = first+1; i < last; ++i)
		{
			std::cout << a[i] << ' ';
		}
		std::cout << '\n';
	}
	int get_first() {
		return a[first + 1];
	}
	int get_last() {
		return a[last - 1];
	}
};

int main() {
	deq arr;
	for (int i = 1; i <= 6; ++i)
	{
		arr.add_end(i);
	}
	arr.print();
	std::cout << arr.get_first() << ' ' << arr.get_last() << '\n';
	for (int i = 0; i < 5; ++i)
	{
		arr.del_start();
	}
	arr.print();
	std::cout << arr.get_first() << ' ' << arr.get_last();
	return 0;
}